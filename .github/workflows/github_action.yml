name: Pull Request Inline Code Review

on:
  pull_request:
    types: [opened, synchronize]

permissions:
  pull-requests: write

jobs:
  code_review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Post Inline Comments
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          HEAD_SHA: ${{ github.event.pull_request.head.sha }}
        run: |
          import os
          import requests

          GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
          REPO = os.getenv("GITHUB_REPOSITORY")
          PULL_NUMBER = os.getenv("PULL_REQUEST_NUMBER")
          HEAD_SHA = os.getenv("HEAD_SHA")

          def get_changed_files():
              url = f"https://api.github.com/repos/{REPO}/pulls/{PULL_NUMBER}/files"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              response = requests.get(url, headers=headers)
              if response.status_code != 200:
                  print(f"Failed to fetch PR files: {response.content}")
                  return []
              return response.json()

          def post_comment(file_path, diff_hunk, line, comment):
              url = f"https://api.github.com/repos/{REPO}/pulls/{PULL_NUMBER}/comments"
              headers = {
                  "Authorization": f"token {GITHUB_TOKEN}",
                  "Accept": "application/vnd.github.v3+json"
              }
              data = {
                  "body": comment,
                  "commit_id": HEAD_SHA,
                  "path": file_path,
                  "side": "RIGHT",
                  "line": line,
                  "diff_hunk": diff_hunk
              }
              response = requests.post(url, headers=headers, json=data)
              if response.status_code == 201:
                  print(f"Comment added to {file_path} line {line}")
              else:
                  print(f"Failed to add comment: {response.content}")

          # PR 변경된 파일 가져오기
          files = get_changed_files()
          for file in files:
              file_path = file["filename"]
              diff_hunk = file.get("patch", "")
              if not diff_hunk:
                  continue

              # 원하는 라인에 코멘트 추가
              post_comment(file_path, diff_hunk, 10, "코드 리뷰 코멘트 예제: 이 부분을 최적화할 수 있을까요?")
